// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: link.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const createLink = `-- name: CreateLink :one
INSERT INTO link_redirect (link_url, shortened_url, created_by, updated_by) 
VALUES ($1, $2, $3, $4) RETURNING id, link_url, shortened_url, active, quarantined, created_by, updated_by, created_at, updated_at, version
`

type CreateLinkParams struct {
	LinkUrl      string    `json:"link_url"`
	ShortenedUrl string    `json:"shortened_url"`
	CreatedBy    uuid.UUID `json:"created_by"`
	UpdatedBy    uuid.UUID `json:"updated_by"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (LinkRedirect, error) {
	row := q.db.QueryRow(ctx, createLink,
		arg.LinkUrl,
		arg.ShortenedUrl,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i LinkRedirect
	err := row.Scan(
		&i.ID,
		&i.LinkUrl,
		&i.ShortenedUrl,
		&i.Active,
		&i.Quarantined,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const createLinkHistory = `-- name: CreateLinkHistory :one
INSERT INTO link_redirect_history (link_id, link_url, active, quarantined, created_by, updated_by)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, link_id, link_url, active, quarantined, created_by, updated_by, created_at, updated_at, version
`

type CreateLinkHistoryParams struct {
	LinkID      uuid.UUID `json:"link_id"`
	LinkUrl     string    `json:"link_url"`
	Active      bool      `json:"active"`
	Quarantined bool      `json:"quarantined"`
	CreatedBy   uuid.UUID `json:"created_by"`
	UpdatedBy   uuid.UUID `json:"updated_by"`
}

func (q *Queries) CreateLinkHistory(ctx context.Context, arg CreateLinkHistoryParams) (LinkRedirectHistory, error) {
	row := q.db.QueryRow(ctx, createLinkHistory,
		arg.LinkID,
		arg.LinkUrl,
		arg.Active,
		arg.Quarantined,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i LinkRedirectHistory
	err := row.Scan(
		&i.ID,
		&i.LinkID,
		&i.LinkUrl,
		&i.Active,
		&i.Quarantined,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const getLinkByID = `-- name: GetLinkByID :one
SELECT id, link_url, shortened_url, active, quarantined, created_by, updated_by, created_at, updated_at, version FROM link_redirect WHERE id = $1
`

func (q *Queries) GetLinkByID(ctx context.Context, id uuid.UUID) (LinkRedirect, error) {
	row := q.db.QueryRow(ctx, getLinkByID, id)
	var i LinkRedirect
	err := row.Scan(
		&i.ID,
		&i.LinkUrl,
		&i.ShortenedUrl,
		&i.Active,
		&i.Quarantined,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const getLinkByShortenedURL = `-- name: GetLinkByShortenedURL :one
SELECT id, link_url, shortened_url, active, quarantined, created_by, updated_by, created_at, updated_at, version FROM link_redirect WHERE shortened_url = $1
`

func (q *Queries) GetLinkByShortenedURL(ctx context.Context, shortenedUrl string) (LinkRedirect, error) {
	row := q.db.QueryRow(ctx, getLinkByShortenedURL, shortenedUrl)
	var i LinkRedirect
	err := row.Scan(
		&i.ID,
		&i.LinkUrl,
		&i.ShortenedUrl,
		&i.Active,
		&i.Quarantined,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const getLinksByUserID = `-- name: GetLinksByUserID :many
SELECT id, link_url, shortened_url, active, quarantined, created_by, updated_by, created_at, updated_at, version FROM link_redirect WHERE created_by = $1 OR updated_by = $1
`

func (q *Queries) GetLinksByUserID(ctx context.Context, createdBy uuid.UUID) ([]LinkRedirect, error) {
	rows, err := q.db.Query(ctx, getLinksByUserID, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LinkRedirect{}
	for rows.Next() {
		var i LinkRedirect
		if err := rows.Scan(
			&i.ID,
			&i.LinkUrl,
			&i.ShortenedUrl,
			&i.Active,
			&i.Quarantined,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLink = `-- name: UpdateLink :one
UPDATE link_redirect SET 
link_url = COALESCE($1, link_url), 
active = COALESCE($2, active),  
updated_by = $3, 
updated_at = now(), 
version = version + 1 
WHERE id = $4 RETURNING id, link_url, shortened_url, active, quarantined, created_by, updated_by, created_at, updated_at, version
`

type UpdateLinkParams struct {
	LinkUrl   *string   `json:"link_url"`
	Active    *bool     `json:"active"`
	UpdatedBy uuid.UUID `json:"updated_by"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateLink(ctx context.Context, arg UpdateLinkParams) (LinkRedirect, error) {
	row := q.db.QueryRow(ctx, updateLink,
		arg.LinkUrl,
		arg.Active,
		arg.UpdatedBy,
		arg.ID,
	)
	var i LinkRedirect
	err := row.Scan(
		&i.ID,
		&i.LinkUrl,
		&i.ShortenedUrl,
		&i.Active,
		&i.Quarantined,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}
