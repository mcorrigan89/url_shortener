// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (given_name, family_name, email, email_verified, avatar_url) 
VALUES ($1, $2, $3, $4::boolean, $5) RETURNING id, given_name, family_name, email, email_verified, avatar_url, created_at, updated_at, version
`

type CreateUserParams struct {
	GivenName     *string `json:"given_name"`
	FamilyName    *string `json:"family_name"`
	Email         string  `json:"email"`
	EmailVerified bool    `json:"email_verified"`
	AvatarUrl     *string `json:"avatar_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.GivenName,
		arg.FamilyName,
		arg.Email,
		arg.EmailVerified,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GivenName,
		&i.FamilyName,
		&i.Email,
		&i.EmailVerified,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const createUserAuth = `-- name: CreateUserAuth :one
INSERT INTO user_auth (user_id, value, provider, provider_id, provider_data) 
VALUES ($1, $2, $3, $4, $5) RETURNING id, user_id, value, provider, provider_id, provider_data, active, created_at, updated_at, version
`

type CreateUserAuthParams struct {
	UserID       uuid.UUID `json:"user_id"`
	Value        string    `json:"value"`
	Provider     string    `json:"provider"`
	ProviderID   string    `json:"provider_id"`
	ProviderData []byte    `json:"provider_data"`
}

func (q *Queries) CreateUserAuth(ctx context.Context, arg CreateUserAuthParams) (UserAuth, error) {
	row := q.db.QueryRow(ctx, createUserAuth,
		arg.UserID,
		arg.Value,
		arg.Provider,
		arg.ProviderID,
		arg.ProviderData,
	)
	var i UserAuth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Value,
		&i.Provider,
		&i.ProviderID,
		&i.ProviderData,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO user_session (user_id, token, expires_at) VALUES ($1, $2, $3) RETURNING id, user_id, impersonator_id, token, expires_at, user_expired, created_at, updated_at, version
`

type CreateUserSessionParams struct {
	UserID    uuid.UUID          `json:"user_id"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (UserSession, error) {
	row := q.db.QueryRow(ctx, createUserSession, arg.UserID, arg.Token, arg.ExpiresAt)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImpersonatorID,
		&i.Token,
		&i.ExpiresAt,
		&i.UserExpired,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const expireUserSession = `-- name: ExpireUserSession :exec
UPDATE user_session SET user_expired = TRUE WHERE user_session.id = $1
`

func (q *Queries) ExpireUserSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, expireUserSession, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT users.id, users.given_name, users.family_name, users.email, users.email_verified, users.avatar_url, users.created_at, users.updated_at, users.version, user_auth.id, user_auth.user_id, user_auth.value, user_auth.provider, user_auth.provider_id, user_auth.provider_data, user_auth.active, user_auth.created_at, user_auth.updated_at, user_auth.version FROM users 
JOIN user_auth ON users.id = user_auth.user_id
WHERE users.email = $1
`

type GetUserByEmailRow struct {
	User     User     `json:"user"`
	UserAuth UserAuth `json:"user_auth"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.User.ID,
		&i.User.GivenName,
		&i.User.FamilyName,
		&i.User.Email,
		&i.User.EmailVerified,
		&i.User.AvatarUrl,
		&i.User.CreatedAt,
		&i.User.UpdatedAt,
		&i.User.Version,
		&i.UserAuth.ID,
		&i.UserAuth.UserID,
		&i.UserAuth.Value,
		&i.UserAuth.Provider,
		&i.UserAuth.ProviderID,
		&i.UserAuth.ProviderData,
		&i.UserAuth.Active,
		&i.UserAuth.CreatedAt,
		&i.UserAuth.UpdatedAt,
		&i.UserAuth.Version,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT users.id, users.given_name, users.family_name, users.email, users.email_verified, users.avatar_url, users.created_at, users.updated_at, users.version, user_auth.id, user_auth.user_id, user_auth.value, user_auth.provider, user_auth.provider_id, user_auth.provider_data, user_auth.active, user_auth.created_at, user_auth.updated_at, user_auth.version FROM users
JOIN user_auth ON users.id = user_auth.user_id
WHERE users.id = $1
`

type GetUserByIDRow struct {
	User     User     `json:"user"`
	UserAuth UserAuth `json:"user_auth"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.User.ID,
		&i.User.GivenName,
		&i.User.FamilyName,
		&i.User.Email,
		&i.User.EmailVerified,
		&i.User.AvatarUrl,
		&i.User.CreatedAt,
		&i.User.UpdatedAt,
		&i.User.Version,
		&i.UserAuth.ID,
		&i.UserAuth.UserID,
		&i.UserAuth.Value,
		&i.UserAuth.Provider,
		&i.UserAuth.ProviderID,
		&i.UserAuth.ProviderData,
		&i.UserAuth.Active,
		&i.UserAuth.CreatedAt,
		&i.UserAuth.UpdatedAt,
		&i.UserAuth.Version,
	)
	return i, err
}

const getUserByProviderID = `-- name: GetUserByProviderID :one
SELECT users.id, users.given_name, users.family_name, users.email, users.email_verified, users.avatar_url, users.created_at, users.updated_at, users.version, user_auth.id, user_auth.user_id, user_auth.value, user_auth.provider, user_auth.provider_id, user_auth.provider_data, user_auth.active, user_auth.created_at, user_auth.updated_at, user_auth.version FROM users 
JOIN user_auth ON users.id = user_auth.user_id
WHERE user_auth.provider_id = $1
AND user_auth.provider = $2
`

type GetUserByProviderIDParams struct {
	ProviderID string `json:"provider_id"`
	Provider   string `json:"provider"`
}

type GetUserByProviderIDRow struct {
	User     User     `json:"user"`
	UserAuth UserAuth `json:"user_auth"`
}

func (q *Queries) GetUserByProviderID(ctx context.Context, arg GetUserByProviderIDParams) (GetUserByProviderIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByProviderID, arg.ProviderID, arg.Provider)
	var i GetUserByProviderIDRow
	err := row.Scan(
		&i.User.ID,
		&i.User.GivenName,
		&i.User.FamilyName,
		&i.User.Email,
		&i.User.EmailVerified,
		&i.User.AvatarUrl,
		&i.User.CreatedAt,
		&i.User.UpdatedAt,
		&i.User.Version,
		&i.UserAuth.ID,
		&i.UserAuth.UserID,
		&i.UserAuth.Value,
		&i.UserAuth.Provider,
		&i.UserAuth.ProviderID,
		&i.UserAuth.ProviderData,
		&i.UserAuth.Active,
		&i.UserAuth.CreatedAt,
		&i.UserAuth.UpdatedAt,
		&i.UserAuth.Version,
	)
	return i, err
}

const getUserBySessionToken = `-- name: GetUserBySessionToken :one
SELECT users.id, users.given_name, users.family_name, users.email, users.email_verified, users.avatar_url, users.created_at, users.updated_at, users.version, user_auth.id, user_auth.user_id, user_auth.value, user_auth.provider, user_auth.provider_id, user_auth.provider_data, user_auth.active, user_auth.created_at, user_auth.updated_at, user_auth.version, user_session.id, user_session.user_id, user_session.impersonator_id, user_session.token, user_session.expires_at, user_session.user_expired, user_session.created_at, user_session.updated_at, user_session.version FROM users 
JOIN user_auth ON users.id = user_auth.user_id
JOIN user_session ON users.id = user_session.user_id
WHERE user_session.token = $1
AND user_session.user_expired = FALSE
`

type GetUserBySessionTokenRow struct {
	User        User        `json:"user"`
	UserAuth    UserAuth    `json:"user_auth"`
	UserSession UserSession `json:"user_session"`
}

func (q *Queries) GetUserBySessionToken(ctx context.Context, token string) (GetUserBySessionTokenRow, error) {
	row := q.db.QueryRow(ctx, getUserBySessionToken, token)
	var i GetUserBySessionTokenRow
	err := row.Scan(
		&i.User.ID,
		&i.User.GivenName,
		&i.User.FamilyName,
		&i.User.Email,
		&i.User.EmailVerified,
		&i.User.AvatarUrl,
		&i.User.CreatedAt,
		&i.User.UpdatedAt,
		&i.User.Version,
		&i.UserAuth.ID,
		&i.UserAuth.UserID,
		&i.UserAuth.Value,
		&i.UserAuth.Provider,
		&i.UserAuth.ProviderID,
		&i.UserAuth.ProviderData,
		&i.UserAuth.Active,
		&i.UserAuth.CreatedAt,
		&i.UserAuth.UpdatedAt,
		&i.UserAuth.Version,
		&i.UserSession.ID,
		&i.UserSession.UserID,
		&i.UserSession.ImpersonatorID,
		&i.UserSession.Token,
		&i.UserSession.ExpiresAt,
		&i.UserSession.UserExpired,
		&i.UserSession.CreatedAt,
		&i.UserSession.UpdatedAt,
		&i.UserSession.Version,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET given_name = $2, family_name = $3 WHERE id = $1 RETURNING id, given_name, family_name, email, email_verified, avatar_url, created_at, updated_at, version
`

type UpdateUserParams struct {
	ID         uuid.UUID `json:"id"`
	GivenName  *string   `json:"given_name"`
	FamilyName *string   `json:"family_name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.GivenName, arg.FamilyName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GivenName,
		&i.FamilyName,
		&i.Email,
		&i.EmailVerified,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}
